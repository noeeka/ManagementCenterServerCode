var RSTModule,
  slice = [].slice;

$.rstFnName = function(fn) {
  return fn.name || (fn + '').split(/\s|\(/)[1];
};

$.rstInit = function(fn, name, set) {
  if (set == null) {
    set = true;
  }
  window.RST = window.RST || {};
  window.RST.apps = window.RST.apps || {};
  window.RST.instances = window.RST.instances || {};
  window.RST.config = window.RST.config || {};
  if (fn && set) {
    name = name || $.rstFnName(fn);
    return window.RST.apps[name] = fn;
  } else {
    return window.RST.apps[fn];
  }
};

$.rstPlugin = function(fn, name, bypass, elPluggin) {
  var obj;
  if (bypass == null) {
    bypass = false;
  }
  if (elPluggin == null) {
    elPluggin = true;
  }
  obj = {};
  $.rstInit(fn, name);
  name = name || $.rstFnName(fn);
  obj[name] = function() {
    var args, option;
    option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    this.each(function() {
      var $this, data, key;
      $this = $(this);
      key = 'rst-' + name;
      data = $this.data(key);
      if (!data || bypass) {
        $this.data('name', name);
        $this.data(key, (data = new fn(option, this)));
      }
      if (typeof option === 'string') {
        return data[option].apply(data, args);
      }
    });
  };
  $.fn.extend(obj);
  if (!elPluggin) {
    obj[name] = function(option) {
      return new fn(option);
    };
    return $.extend(obj);
  }
};

RSTModule = (function() {
  RSTModule.prototype.defaults = {};

  function RSTModule(options, element) {
    this.ops = $.extend({}, this.defaults, options);
    this.sel = this.sel || {};
    this.el = this.el || {};
    this.el.target = $(element);
    this.init();
  }

  RSTModule.prototype.init = function() {
    this.classes = {
      active: 'is-active',
      offscreen: 'l-offscreen'
    };
    this.keys = {
      esc: 27,
      down: 40,
      up: 38,
      left: 37,
      right: 39,
      o: 79,
      space: 32,
      tab: 9,
      enter: 13
    };
    this.aria = {
      expanded: 'aria-expanded',
      hidden: 'aria-hidden',
      controls: 'aria-controls',
      selected: 'aria-selected',
      invalid: 'aria-invalid',
      pressed: 'aria-pressed',
      described: 'aria-describedby',
      checked: 'aria-checked',
      label: 'aria-label',
      labelled: 'aria-labelledby',
      popup: 'aria-haspopup'
    };
    return this.attr = {
      tabindex: 'tabindex'
    };
  };

  RSTModule.prototype.stop = function(e) {
    e.preventDefault();
    return e.stopPropagation();
  };

  RSTModule.prototype.target = function(e) {
    return $(e.target);
  };

  RSTModule.prototype.currentTarget = function(e) {
    return $(e.currentTarget);
  };

  RSTModule.prototype.isEnter = function(e) {
    return this.keycode(e) === this.keys.enter;
  };

  RSTModule.prototype.isSpace = function(e) {
    return this.keycode(e) === this.keys.space;
  };

  RSTModule.prototype.isTab = function(e) {
    return this.keycode(e) === this.keys.tab;
  };

  RSTModule.prototype.isBackTab = function(e) {
    return e.shiftKey && this.isTab(e);
  };

  RSTModule.prototype.isEsc = function(e) {
    return this.keycode(e) === this.keys.esc;
  };

  RSTModule.prototype.isEnterOrSpace = function(e) {
    return this.isEnter(e) || this.isSpace(e);
  };

  RSTModule.prototype.keycode = function(e) {
    return e.which;
  };

  RSTModule.prototype.isIE = function(version) {
    if (version == null) {
      version = 8;
    }
    return bowser.msie && bowser.version === version;
  };

  return RSTModule;

})();

$.rstInit(RSTModule, 'RSTModule');




